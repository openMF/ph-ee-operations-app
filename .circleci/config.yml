version: 2.1
orbs:
  slack: circleci/slack@4.12.5
  aws-ecr: circleci/aws-ecr@8.2.1
  helm: circleci/helm@2.0.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  mifos-orb: mifos/docker-image-availability-check-and-upgrade@1.0.0
executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:8-buster-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD


jobs:
  build_and_push_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb  
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - kubernetes/install-kubectl
      - checkout
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/openmf/ph-ee-operations-app/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            ./gradlew clean
            ./gradlew bootJar
            docker build -t "openmf/ph-ee-operations-app:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "openmf/ph-ee-operations-app:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter
  
  build_and_push_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14
      - kubernetes/install-kubectl
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            ./gradlew clean
            ./gradlew bootJar
            docker build -t openmf/ph-ee-operations-app:latest .
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/openmf/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY"; fi
              docker image tag openmf/$CIRCLE_PR_REPONAME:latest openmf/$CIRCLE_PR_REPONAME:$JIRA_STORY
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push openmf/ph-ee-operations-app:latest
            fi
            if [ "$CIRCLE_BRANCH" != "master" ]; then
            PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
            PR_TITLE=$(curl -sSL "https://api.github.com/repos/openmf/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
            JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
            docker push openmf/$CIRCLE_PR_REPONAME:${JIRA_STORY}
            fi
  docker-image-availability-check-and-upgrade:
    docker:
      - image: cimg/python:3.10
    steps:
      - mifos-orb/docker-image-availability-check-and-upgrade:
          namespace: paymenthub
          chart-base-url: https://fynarfin.io/images
          chart-name: ph-ee-g2psandbox-fynarfin
          chart-version: 0.2.0
          release-name: g2p-sandbox
          cluster-name: "sit"
          aws-region: "$REGION"
          service-file-path: https://raw.githubusercontent.com/openMF/ph-ee-env-labs/master/.circleci/services.txt
  build-and-host-engine:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - run: git clone https://github.com/openMF/ph-ee-env-template
      - run: rm -f ph-ee-env-template/helm/ph-ee-engine/Chart.lock ph-ee-env-template/helm/ph-ee-engine/requirements.lock ph-ee-env-template/helm/ph-ee-engine/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      #      - run: "sed -i '2s/.*/appVersion: 0.0.0/' helm/ph-ee-engine/Chart.yaml"
      #      - run: "sed -i '5s/.*/version: 0.0.0-SNAPSHOT/' helm/ph-ee-engine/Chart.yaml"
      - run: helm dep up ph-ee-env-template/helm/ph-ee-engine
      - run: helm package ph-ee-env-template/helm/ph-ee-engine
      - run: helm repo index .
      - run: echo "$CERT_FILE" | base64 --decode > b64encoded.pem
      - run: chmod 400 b64encoded.pem
      - run: scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-engine-0.0.0-SNAPSHOT.tgz ec2-user@13.233.68.128:~/
      - run: ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo cp -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/ph-ee-engine-0.0.0-SNAPSHOT index.yaml ph-ee-engine-0.0.0-SNAPSHOT.tgz

  build-and-host-g2p-sandbox:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - run: git clone https://github.com/openMF/ph-ee-env-template
      - run: rm -f ph-ee-env-template/helm/g2p-sandbox/Chart.lock ph-ee-env-template/helm/g2p-sandbox/requirements.lock ph-ee-env-template/helm/g2p-sandbox/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      #      - run: "sed -i '6s/.*/appVersion: 0.0.0/' helm/g2p-sandbox/Chart.yaml"
      #      - run: "sed -i '7s/.*/version: 0.0.0/' helm/g2p-sandbox/Chart.yaml"
      # - run: "sed -i '4s/.*/version: 0.0.0-SNAPSHOT/' helm/g2p-sandbox/requirements.yaml"
      # SED & replace dependency with 0.0.0
      - run: helm dep up ph-ee-env-template/helm/g2p-sandbox
      - run: helm package ph-ee-env-template/helm/g2p-sandbox
      - run: helm repo index .
      - run: echo "$CERT_FILE" | base64 --decode > b64encoded.pem
      - run: chmod 400 b64encoded.pem
      - run: scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-0.0.0.tgz ec2-user@13.233.68.128:~/
      - run: ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo cp -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/ph-ee-g2psandbox-0.0.0 index.yaml ph-ee-g2psandbox-0.0.0.tgz

  build-host-g2p-fyn-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - run: git clone https://github.com/openmf/ph-ee-env-labs
      - run: rm -f ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.lock ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/requirements.lock ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      # - run: "sed -i '12s/.*/version: 0.0.0/' helm/g2p-sandbox-fynarfin-SIT/Chart.yaml"
      - run: cat ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
      - run: helm dep up ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT
      - run: helm package ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT
      - run: helm repo index .
      - run: echo "$CERT_FILE" | base64 --decode > b64encoded.pem
      - run: chmod 400 b64encoded.pem
      - run: scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-fynarfin-0.2.0.tgz ec2-user@13.233.68.128:~/
      - run: ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/ph-ee-g2psandbox-fynarfin index.yaml ph-ee-g2psandbox-fynarfin-0.2.0.tgz



  test-chart-gov:
    docker:
      - image: cimg/openjdk:17.0.0
    steps:
      - run: git clone https://github.com/openmf/ph-ee-integration-test
      - run:
          name: Ngrok setup
          command: curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
      - run:
          name: Test execution
          command: |
            ngrok config add-authtoken "$AUTH_TOKEN"
            ngrok http 53013 > /dev/null &
            echo -n "Extracting ngrok public url ."
            NGROK_PUBLIC_URL=""
            while [ -z "$NGROK_PUBLIC_URL" ]; do
              # Run 'curl' against ngrok API and extract public (using 'sed' command)
              export NGROK_PUBLIC_URL=$(curl --silent --max-time 10 --connect-timeout 5 \
                                        --show-error http://127.0.0.1:4040/api/tunnels | \
                                        sed -nE 's/.*public_url":"https:..([^"]*).*/\1/p')
              sleep 1
              echo -n "."
            done

            export CALLBACK_URL="https://$NGROK_PUBLIC_URL"
            echo -n "Public url ."
            echo $CALLBACK_URL
            cd ph-ee-integration-test && ./gradlew test -Dcucumber.filter.tags="@gov"
            echo -n "Test execution is completed, kill ngrok"
            pkill ngrok
      - store_test_results:
          path: ph-ee-integration-test/build/cucumber.xml
      - store_artifacts:
          path: ph-ee-integration-test/build/reports/tests/test
  test-chart-ams:
    docker:
      - image: cimg/openjdk:17.0.0
    steps:
      - run: git clone https://github.com/openmf/ph-ee-integration-test
      - run: cd ph-ee-integration-test && ./gradlew test -Dcucumber.filter.tags="@amsIntegration"
      - store_test_results:
          path: ph-ee-integration-test/build/cucumber.xml
      - store_artifacts:
          path: ph-ee-integration-test/build/reports/tests/test


workflows:
  version: 2
  build-and-push:
    jobs:
      - build_and_push_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_latest_image:
          context:
            - DOCKER
            - AWS
      - build-and-host-engine:
          requires:
            - build_and_push_tag_image
            - build_and_push_latest_image
          context:
            - AWS
            - Helm
            - slack
      - build-and-host-g2p-sandbox:
          requires:
            - build-and-host-engine
          context:
            - AWS
            - Helm
            - slack
      - build-host-g2p-fyn-chart:
          requires:
            - build-and-host-g2p-sandbox
          context:
            - AWS
            - Helm
      - docker-image-availability-check-and-upgrade:
          context:
            - AWS
            - Helm
            - slack
          requires:
            - build-host-g2p-fyn-chart
      - test-chart-gov:
          requires:
            - docker-image-availability-check-and-upgrade
          context:
            - AWS
            - Helm
            - slack
            - Ngrok
      - test-chart-ams:
          requires:
            - docker-image-availability-check-and-upgrade
          context:
            - AWS
            - Helm
            - slack

             
